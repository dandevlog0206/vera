#include "../../include/vera/graphics/format_traits.h"

#include "../../include/vera/core/assertion.h"

VERA_NAMESPACE_BEGIN

uint32_t get_format_size(Format format)
{
	switch (format) {
	case Format::R8Unorm:
	case Format::R8Snorm:
	case Format::R8Uscaled:
	case Format::R8Sscaled:
	case Format::R8Uint:
	case Format::R8Sint:
	case Format::R8Srgb:
		return 1;
	case Format::R16Unorm:
	case Format::R16Snorm:
	case Format::R16Uscaled:
	case Format::R16Sscaled:
	case Format::R16Uint:
	case Format::R16Sint:
	case Format::R16Float:
		return 2;
	case Format::R32Uint:
	case Format::R32Sint:
	case Format::R32Float:
		return 4;
	case Format::R64Uint:
	case Format::R64Sint:
	case Format::R64Float:
		return 8;
	case Format::RG8Unorm:
	case Format::RG8Snorm:
	case Format::RG8Uscaled:
	case Format::RG8Sscaled:
	case Format::RG8Uint:
	case Format::RG8Sint:
	case Format::RG8Srgb:
		return 2;
	case Format::RG16Unorm:
	case Format::RG16Snorm:
	case Format::RG16Uscaled:
	case Format::RG16Sscaled:
	case Format::RG16Uint:
	case Format::RG16Sint:
	case Format::RG16Float:
		return 4;
	case Format::RG32Uint:
	case Format::RG32Sint:
	case Format::RG32Float:
		return 8;
	case Format::RG64Uint:
	case Format::RG64Sint:
	case Format::RG64Float:
		return 16;
	case Format::RGB8Unorm:
	case Format::RGB8Snorm:
	case Format::RGB8Uscaled:
	case Format::RGB8Sscaled:
	case Format::RGB8Uint:
	case Format::RGB8Sint:
	case Format::RGB8Srgb:
	case Format::BGR8Unorm:
	case Format::BGR8Snorm:
	case Format::BGR8Uscaled:
	case Format::BGR8Sscaled:
	case Format::BGR8Uint:
	case Format::BGR8Sint:
	case Format::BGR8Srgb:
		return 3;
	case Format::RGB16Unorm:
	case Format::RGB16Snorm:
	case Format::RGB16Uscaled:
	case Format::RGB16Sscaled:
	case Format::RGB16Uint:
	case Format::RGB16Sint:
	case Format::RGB16Float:
		return 6;
	case Format::RGB32Uint:
	case Format::RGB32Sint:
	case Format::RGB32Float:
		return 12;
	case Format::RGB64Uint:
	case Format::RGB64Sint:
	case Format::RGB64Float:
		return 24;
	case Format::RGBA8Unorm:
	case Format::RGBA8Snorm:
	case Format::RGBA8Uscaled:
	case Format::RGBA8Sscaled:
	case Format::RGBA8Uint:
	case Format::RGBA8Sint:
	case Format::RGBA8Srgb:
	case Format::BGRA8Unorm:
	case Format::BGRA8Snorm:
	case Format::BGRA8Uscaled:
	case Format::BGRA8Sscaled:
	case Format::BGRA8Uint:
	case Format::BGRA8Sint:
	case Format::BGRA8Srgb:
		return 4;
	case Format::RGBA16Unorm:
	case Format::RGBA16Snorm:
	case Format::RGBA16Uscaled:
	case Format::RGBA16Sscaled:
	case Format::RGBA16Uint:
	case Format::RGBA16Sint:
	case Format::RGBA16Float:
		return 8;
	case Format::RGBA32Uint:
	case Format::RGBA32Sint:
	case Format::RGBA32Float:
		return 16;
	case Format::RGBA64Uint:
	case Format::RGBA64Sint:
	case Format::RGBA64Float:
		return 32;
	case Format::RG4UnormPack8:
		return 8;
	case Format::RGBA4UnormPack16:
	case Format::BGRA4UnormPack16:
	case Format::R5G6B5UnormPack16:
	case Format::B5G6R5UnormPack16:
	case Format::R5G5B5A1UnormPack16:
	case Format::B5G5R5A1UnormPack16:
	case Format::A1R5G5B5UnormPack16:
	case Format::A4R4G4B4UnormPack16:
	case Format::A4B4G4R4UnormPack16:
	case Format::A1B5G5R5UnormPack16:
		return 2;
	case Format::ABGR8UnormPack32:
	case Format::ABGR8SnormPack32:
	case Format::ABGR8UscaledPack32:
	case Format::ABGR8SscaledPack32:
	case Format::ABGR8UintPack32:
	case Format::ABGR8SintPack32:
	case Format::ABGR8SrgbPack32:
	case Format::A2RGB10UnormPack32:
	case Format::A2RGB10SnormPack32:
	case Format::A2RGB10UscaledPack32:
	case Format::A2RGB10SscaledPack32:
	case Format::A2RGB10UintPack32:
	case Format::A2RGB10SintPack32:
	case Format::A2BGR10UnormPack32:
	case Format::A2BGR10SnormPack32:
	case Format::A2BGR10UscaledPack32:
	case Format::A2BGR10SscaledPack32:
	case Format::A2BGR10UintPack32:
	case Format::A2BGR10SintPack32:
		return 4;
	case Format::D16Unorm:
		return 2;
	case Format::X8D24Unorm:
	case Format::D32Float:
		return 4;
	case Format::S8Uint:
		return 1;
	case Format::D16UnormS8Uint:
		return 3;
	case Format::D24UnormS8Uint:
		return 4;
	case Format::D32FloatS8Uint:
		return 5;
	case Format::A8Unorm:
		return 1;
	}

	VERA_ASSERT_MSG(false, "invalid format");
}

uint32_t get_format_component_count(Format format)
{
	switch (format) {
	case Format::R8Unorm:
	case Format::R8Snorm:
	case Format::R8Uscaled:
	case Format::R8Sscaled:
	case Format::R8Uint:
	case Format::R8Sint:
	case Format::R8Srgb:
	case Format::R16Unorm:
	case Format::R16Snorm:
	case Format::R16Uscaled:
	case Format::R16Sscaled:
	case Format::R16Uint:
	case Format::R16Sint:
	case Format::R16Float:
	case Format::R32Uint:
	case Format::R32Sint:
	case Format::R32Float:
	case Format::R64Uint:
	case Format::R64Sint:
	case Format::R64Float:
		return 1;
	case Format::RG8Unorm:
	case Format::RG8Snorm:
	case Format::RG8Uscaled:
	case Format::RG8Sscaled:
	case Format::RG8Uint:
	case Format::RG8Sint:
	case Format::RG8Srgb:
	case Format::RG16Unorm:
	case Format::RG16Snorm:
	case Format::RG16Uscaled:
	case Format::RG16Sscaled:
	case Format::RG16Uint:
	case Format::RG16Sint:
	case Format::RG16Float:
	case Format::RG32Uint:
	case Format::RG32Sint:
	case Format::RG32Float:
	case Format::RG64Uint:
	case Format::RG64Sint:
	case Format::RG64Float:
		return 2;
	case Format::RGB8Unorm:
	case Format::RGB8Snorm:
	case Format::RGB8Uscaled:
	case Format::RGB8Sscaled:
	case Format::RGB8Uint:
	case Format::RGB8Sint:
	case Format::RGB8Srgb:
	case Format::BGR8Unorm:
	case Format::BGR8Snorm:
	case Format::BGR8Uscaled:
	case Format::BGR8Sscaled:
	case Format::BGR8Uint:
	case Format::BGR8Sint:
	case Format::BGR8Srgb:
	case Format::RGB16Unorm:
	case Format::RGB16Snorm:
	case Format::RGB16Uscaled:
	case Format::RGB16Sscaled:
	case Format::RGB16Uint:
	case Format::RGB16Sint:
	case Format::RGB16Float:
	case Format::RGB32Uint:
	case Format::RGB32Sint:
	case Format::RGB32Float:
	case Format::RGB64Uint:
	case Format::RGB64Sint:
	case Format::RGB64Float:
		return 3;
	case Format::RGBA8Unorm:
	case Format::RGBA8Snorm:
	case Format::RGBA8Uscaled:
	case Format::RGBA8Sscaled:
	case Format::RGBA8Uint:
	case Format::RGBA8Sint:
	case Format::RGBA8Srgb:
	case Format::BGRA8Unorm:
	case Format::BGRA8Snorm:
	case Format::BGRA8Uscaled:
	case Format::BGRA8Sscaled:
	case Format::BGRA8Uint:
	case Format::BGRA8Sint:
	case Format::BGRA8Srgb:
	case Format::RGBA16Unorm:
	case Format::RGBA16Snorm:
	case Format::RGBA16Uscaled:
	case Format::RGBA16Sscaled:
	case Format::RGBA16Uint:
	case Format::RGBA16Sint:
	case Format::RGBA16Float:
	case Format::RGBA32Uint:
	case Format::RGBA32Sint:
	case Format::RGBA32Float:
	case Format::RGBA64Uint:
	case Format::RGBA64Sint:
	case Format::RGBA64Float:
		return 4;
	case Format::RG4UnormPack8:
		return 2;
	case Format::RGBA4UnormPack16:
	case Format::BGRA4UnormPack16:
		return 4;
	case Format::R5G6B5UnormPack16:
	case Format::B5G6R5UnormPack16:
		return 3;
	case Format::R5G5B5A1UnormPack16:
	case Format::B5G5R5A1UnormPack16:
	case Format::A1R5G5B5UnormPack16:
	case Format::A4R4G4B4UnormPack16:
	case Format::A4B4G4R4UnormPack16:
	case Format::A1B5G5R5UnormPack16:
	case Format::ABGR8UnormPack32:
	case Format::ABGR8SnormPack32:
	case Format::ABGR8UscaledPack32:
	case Format::ABGR8SscaledPack32:
	case Format::ABGR8UintPack32:
	case Format::ABGR8SintPack32:
	case Format::ABGR8SrgbPack32:
	case Format::A2RGB10UnormPack32:
	case Format::A2RGB10SnormPack32:
	case Format::A2RGB10UscaledPack32:
	case Format::A2RGB10SscaledPack32:
	case Format::A2RGB10UintPack32:
	case Format::A2RGB10SintPack32:
	case Format::A2BGR10UnormPack32:
	case Format::A2BGR10SnormPack32:
	case Format::A2BGR10UscaledPack32:
	case Format::A2BGR10SscaledPack32:
	case Format::A2BGR10UintPack32:
	case Format::A2BGR10SintPack32:
		return 4;
	case Format::D16Unorm:
	case Format::X8D24Unorm:
	case Format::D32Float:
	case Format::S8Uint:
		return 1;
	case Format::D16UnormS8Uint:
	case Format::D24UnormS8Uint:
	case Format::D32FloatS8Uint:
		return 2;
	case Format::A8Unorm:
		return 1;
	}

	VERA_ASSERT_MSG(false, "invalid format");
}

bool format_has_alpha(Format format)
{
	switch (format) {
	case Format::RGBA8Unorm:
	case Format::RGBA8Snorm:
	case Format::RGBA8Uscaled:
	case Format::RGBA8Sscaled:
	case Format::RGBA8Uint:
	case Format::RGBA8Sint:
	case Format::RGBA8Srgb:
	case Format::BGRA8Unorm:
	case Format::BGRA8Snorm:
	case Format::BGRA8Uscaled:
	case Format::BGRA8Sscaled:
	case Format::BGRA8Uint:
	case Format::BGRA8Sint:
	case Format::BGRA8Srgb:
	case Format::RGBA16Unorm:
	case Format::RGBA16Snorm:
	case Format::RGBA16Uscaled:
	case Format::RGBA16Sscaled:
	case Format::RGBA16Uint:
	case Format::RGBA16Sint:
	case Format::RGBA16Float:
	case Format::RGBA32Uint:
	case Format::RGBA32Sint:
	case Format::RGBA32Float:
	case Format::RGBA64Uint:
	case Format::RGBA64Sint:
	case Format::RGBA64Float:
	case Format::RGBA4UnormPack16:
	case Format::BGRA4UnormPack16:
	case Format::R5G6B5UnormPack16:
	case Format::B5G6R5UnormPack16:
	case Format::R5G5B5A1UnormPack16:
	case Format::B5G5R5A1UnormPack16:
	case Format::A1R5G5B5UnormPack16:
	case Format::A4R4G4B4UnormPack16:
	case Format::A4B4G4R4UnormPack16:
	case Format::A1B5G5R5UnormPack16:
	case Format::ABGR8UnormPack32:
	case Format::ABGR8SnormPack32:
	case Format::ABGR8UscaledPack32:
	case Format::ABGR8SscaledPack32:
	case Format::ABGR8UintPack32:
	case Format::ABGR8SintPack32:
	case Format::ABGR8SrgbPack32:
	case Format::A2RGB10UnormPack32:
	case Format::A2RGB10SnormPack32:
	case Format::A2RGB10UscaledPack32:
	case Format::A2RGB10SscaledPack32:
	case Format::A2RGB10UintPack32:
	case Format::A2RGB10SintPack32:
	case Format::A2BGR10UnormPack32:
	case Format::A2BGR10SnormPack32:
	case Format::A2BGR10UscaledPack32:
	case Format::A2BGR10SscaledPack32:
	case Format::A2BGR10UintPack32:
	case Format::A2BGR10SintPack32:
	case Format::A8Unorm:
		return true;
	}
	return false;
}

VERA_NAMESPACE_END